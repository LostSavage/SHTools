--[[
Card Namer
Made by Sionar
Version 1.1.1
--]]

------------------Constants
ABILITIES =
{
    {name = 'Mimic', desc = 'Copy another player\'s ability.'},
    {name = 'Saboteur', desc = 'Right after a player reveals an ability, negate its effects.'},
    {name = 'The Confirmed', desc = 'Cannot be negated.\n\nIf you are fascist, reveal your role card. Draw any two abilities from the deck.\n-OR-\nCannot be copied. Right before a player dies, reveal your role card. You become the target of the shot.'},
    {name = 'Martyr', desc = 'Reshuffle the deck. Play a policy card from the deck and use the presidential power. Reshuffle. You die. Cannot be used to win the game. If you are Hitler, the game does not end.'},
    {name = 'Hacker', desc = '[Right after a player reveals an ability that alters the deck, discard pile, election tracker or placards], you use the ability instead.'},
    {name = 'Assassin', desc = '[After Hitler Territory], choose a player. At the start of the third turn after this turn, that player dies if you are not dead.'},
    {name = 'Poisoner', desc = '[After Hitler Territory], place one poison and two water effects face down on three other players. At the start of the fifth turn after this turn, reveal the effects. The player with the poison dies.'},
    {name = 'Spy', desc = '[When a player gains the inspect power], steal the inspect power.\n-OR-\nIf you are Fascist, choose any number of living players. They reveal their roles and give you an ability.'},
    {name = 'Super-Detective', desc = '[Entering Hitler Territory], choose half of the other players. Shuffle their party membership cards, discard one, and investigate them.\nYou cannot be in government for two turns.'},
    {name = 'Collector', desc = 'Draw two random artifacts. Choose one and place it on a player. You may choose to reveal the artifact when the conditions are met.'},
    {name = 'Jester', desc = 'Reshuffle the discard pile into the deck.\n-OR-\n[When another player tries to examine or steal your abilities], you take one of their abilities instead. You may use that ability.'},
    {name = 'Surgeon', desc = '[After a reshuffle, if there are seven or more cards in the deck], look at the top six cards of the deck. Discard two cards, then shuffle the deck.'},
    {name = 'Soulmate', desc = '[Right after you die], choose another player. They die with you.'},
    {name = 'Gravedigger', desc = 'Investigate each dead player\'s party membership card.\n-OR-\nCopy a dead player\'s ability.'},
    {name = 'Trader', desc = 'When this ability is played, each player (including dead players) may give unused abilities to other players. You may play one ability that is given to you.'},
    {name = 'Guardian-Angel', desc = 'Choose another player. Remove all effects from that player. That player cannot be targeted by other players\' abilities.'},
    {name = 'Elitist', desc = '[As the president], after drawing the policy cards, shuffle them back into the deck and draw three new cards.\n-OR-\n[As the chancellor], discard both cards and play the top card of the deck.'},
    {name = 'Super-President', desc = 'Play before voting. After the next government passes, draw four policy cards. Discard one, and give the rest to the president.'},
    {name = 'Gambler', desc = 'Guess the top card of the policy deck. Reveal the policy then shuffle the deck. If you are right, reveal the top card of the ability deck. You may either use it or reshuffle it to reuse Gambler on a future turn. You cannot gamble after failing twice.'},
    {name = 'Puppeteer', desc = '[Right after a player is targeted by an ability], choose a player. That player becomes the new target.'},
    {name = 'Spiritualist', desc = 'Choose a dead player. That player votes for the rest of the game but cannot speak, be in government, or use abilities. You may play to the resurrected player.'},
    {name = 'Senator', desc = 'Move the election tracker left or right by one step.'},
    {name = 'Historian', desc = 'Move the previously elected president and chancellor placards.'},
    {name = 'Usurper', desc = 'Force a special election where you are the president.'},
    {name = 'Lobbyist', desc = 'Reveal this ability before voting. Your next vote cannot be affected and counts for three votes. This ability cannot be copied on the same turn.'},
    {name = 'Fisherman', desc = '[When there are four or more cards in the discard pile], shuffle the discard pile. Look at the top three cards of the discard pile. You may place one card in the draw pile. Shuffle the draw pile.'},
    {name = 'Bandit', desc = '[Right after a topdeck], take the unused power.\n-OR-\nLook at a player\'s abilities. Take an ability from them.'},
    {name = 'Decider', desc = 'Force a govt. with tied votes to pass.\n-OR-\n[Right before topdeck], look at the top two cards in the deck and discard one.'},
    {name = 'Insurgent', desc = 'Reveal this ability before voting. Take the chancellor placard. Ignore the previously elected president and chancellor placards.'},
    {name = 'Silencer', desc = 'Choose a player. That player cannot vote, speak, or use abilities until the turn after the next policy is placed on a track.'},
    {name = 'Naysayer', desc = '[As the president], discard all of the cards and move the election tracker one step to the right.\n-OR-\n[As the chancellor], you may ask the president for a veto.'},
    {name = 'Scout', desc = '[When a player looks at policy, ability or vote cards], you also look at it and anything they discard.\n-OR-\nLook at the top card of the deck, and choose whether or not to discard it.'},
    {name = 'Spelunker', desc = '[When there are eight or less cards in the policy deck], look at the deck then shuffle it.\n-OR-\nLook at either the first or second card at the top of the discard pile.'},
    {name = 'Big-Brother', desc = 'Choose a player. You may look at their abilities and their vote every turn. Once per game, you decide how they vote.'},
    {name = 'Magician', desc = '[After a government is elected], the chancellor draws three cards and hands two to the president. The chancellor gains the presidential power'},
}

EFFECTS =
{
    {name = 'Mark of Shame', desc = 'You didn\'t read the card. Reading the card explains the card.'},
    {name = 'Death Sentence', desc = 'You will die in three turns unless the assassin dies.'},
    {name = '1 Aegis', desc = 'You cannot be targeted by other players\' abilities.'},
    {name = '2 Aegis', desc = 'You cannot be targeted by other players\' abilities.'},
    {name = 'Spooky Ghost', desc = 'You have been resurrected. You vote, but cannot be in government, speak or use abilities. The Spiritualist can nominate you to be chancellor.'},
    {name = 'Silenced', desc = 'You cannot vote, speak, or use abilities until the turn after a policy is placed on a track.'},
    {name = 'Little-Sister', desc = 'You are being watched by Big-Brother. Once per game they decide how you vote.'},
    {name = 'Fake Liberal Party Card', desc = 'Fake Liberal Party Card'},
    {name = 'Fake Fascist Party Card', desc = 'Fake Fascist Party Card'},
    {name = '1 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '1 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '1 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '1 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '1 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '2 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '2 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '2 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '2 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '2 Inspected', desc = 'You have been inspected by the Super-Inspector.'},
    {name = '1 Artifact: Cursed Crown', desc = '[Reveal right after the player is elected as president.] You die. The government is cancelled and the election tracker does not move.'},
    {name = '1 Artifact: Ring of Power', desc = '[Reveal right after the player is elected as president and Super-President is not active.] You draw four policy cards instead of three and discard two of them.'},
    {name = '1 Artifact: Amulet of Warding', desc = '[Reveal anytime.] You gain the Aegis effect for three turns.'},
    {name = '1 Artifact: Nullification Collar', desc = '[Reveal right after the player plays an ability.] Your ability is negated.'},
    {name = '1 Artifact: Last Horcrux', desc = '[Reveal right before the player dies.] You do not die.'},
    {name = '2 Artifact: Cursed Crown', desc = '[Reveal right after the player is elected as president.] You die. The government is cancelled and the election tracker does not move.'},
    {name = '2 Artifact: Ring of Power', desc = '[Reveal right after the player is elected as president and Super-President is not active.] You draw four policy cards instead of three and discard two of them.'},
    {name = '2 Artifact: Amulet of Warding', desc = '[Reveal anytime.] You gain the Aegis effect for three turns.'},
    {name = '2 Artifact: Nullification Collar', desc = '[Reveal right after the player plays an ability.] Your ability is negated.'},
    {name = '2 Artifact: Last Horcrux', desc = '[Reveal right before the player dies.] You do not die.'},
    {name = '3 Artifact: Cursed Crown', desc = '[Reveal right after the player is elected as president.] You die. The government is cancelled and the election tracker does not move.'},
    {name = '3 Artifact: Ring of Power', desc = '[Reveal right after the player is elected as president and Super-President is not active.] You draw four policy cards instead of three and discard two of them.'},
    {name = '3 Artifact: Amulet of Warding', desc = '[Reveal anytime.] You gain the Aegis effect for three turns.'},
    {name = '3 Artifact: Nullification Collar', desc = '[Reveal right after the player plays an ability.] Your ability is negated.'},
    {name = '3 Artifact: Last Horcrux', desc = '[Reveal right before the player dies.] You do not die.'},
    {name = '1 Poisoned Drink', desc = 'You have been poisoned. You die.'},
    {name = '1 Water', desc = 'Just ordinary water. No effect.'},
    {name = '1 Water', desc = 'Just ordinary water. No effect.'},
    {name = '2 Poisoned Drink', desc = 'You have been poisoned. You die.'},
    {name = '2 Water', desc = 'Just ordinary water. No effect.'},
    {name = '2 Water', desc = 'Just ordinary water. No effect.'}
}

NAMER_ZONE_GUID = 'de8a67'
END_ZONE_GUID = '43f223'
NEW_POS = {x = 25.5, y = 1, z = -20.3}

------------------Main Functions
function nameAbilities()
    local deck = getDeckFromZoneByGUID(NAMER_ZONE_GUID)
    if deck == nil then
        print('ERROR: Deck not found.')
        return
    end
    if deck.getQuantity() ~= #ABILITIES then
        print('ERROR: Deck size does not match the card database size.')
        return
    end

    startLuaCoroutine(self, 'nameAbilitiesCoroutine')
end

function nameAbilitiesCoroutine()
    local deck = getDeckFromZoneByGUID(NAMER_ZONE_GUID)
    local params = {}
    local card
    local allObjects
    local pos

    for i = 1,deck.getQuantity()-1 do
		card = deck.takeObject(params)
        card.setName(ABILITIES[i].name)
        card.setDescription(ABILITIES[i].desc)
        card.setPosition(NEW_POS)
        sleep(0.03)
    end
    allObjects = getAllObjects()
    for k,v in pairs(allObjects) do
        pos = v.getPosition()
        if pos.x < 38 and pos.x > 36 and pos.z < -20 and pos.z > -21 then
            card = v
        end
    end
    card.setName(ABILITIES[#ABILITIES].name)
    card.setDescription(ABILITIES[#ABILITIES].desc)
    card.setPosition(NEW_POS)
    sleep(0.1)
    deck = getDeckFromZoneByGUID(END_ZONE_GUID)
    deck.setName('Secret Hitler Expansion Deck')
    deck.setDescription('Made by Piggy and Sionar')
    deck.use_grid = false
    return 1
end

function nameEffects()
    local deck = getDeckFromZoneByGUID(NAMER_ZONE_GUID)
    if deck == nil then
        print('ERROR: Deck not found.')
        return
    end
    if deck.getQuantity() ~= #EFFECTS then
        print('ERROR: Deck size does not match the card database size.')
        return
    end

    startLuaCoroutine(self, 'nameEffectsCoroutine')
end

function nameEffectsCoroutine()
    local deck = getDeckFromZoneByGUID(NAMER_ZONE_GUID)
    local params = {}
    local card
    local allObjects
    local pos

    for i = 1,deck.getQuantity()-1 do
		card = deck.takeObject(params)
        card.setName(EFFECTS[i].name)
        card.setDescription(EFFECTS[i].desc)
        card.setPosition(NEW_POS)
        sleep(0.03)
    end
    allObjects = getAllObjects()
    for k,v in pairs(allObjects) do
        pos = v.getPosition()
        if pos.x < 38 and pos.x > 36 and pos.z < -20 and pos.z > -21 then
            card = v
        end
    end
    card.setName(EFFECTS[#ABILITIES].name)
    card.setDescription(EFFECTS[#ABILITIES].desc)
    card.setPosition(NEW_POS)
    sleep(0.1)
    deck = getDeckFromZoneByGUID(END_ZONE_GUID)
    deck.setName('Effects')
    deck.use_grid = false
    return 1
end



function getDeckFromZoneByGUID(guidIn)
	local deck = nil
	local deck_ct = 0
	local zone = getObjectFromGUID(guidIn)
	local object

	if zone then
		local inZone = zone.getObjects()
		for _, object in ipairs(inZone) do
			if object.name == 'Card' then
				deck_ct = 2
			elseif object.name == 'Deck' then
				deck = object
				deck_ct = deck_ct + 1
			elseif object.name == 'DeckCustom' then
				deck = object
				deck_ct = deck_ct + 1
			end
		end
	end
	if deck_ct == 1 then
		return deck
	end
	return nil
end

function sleep(numSeconds)
	local t0 = os.clock()
	while os.clock() - t0 <= numSeconds do
        coroutine.yield(0)
    end
end


------------------User Interface
local buttonParam = {click_function = 'nameAbilities', label = 'Set Ability\nName and Description', color = {1,1,1}, function_owner = self,
    position = {0,0.1,-0.7}, rotation = {0,0,0}, width = 1000, height = 500, font_size = 100}
self.createButton(buttonParam)

local buttonParam = {click_function = 'nameEffects', label = 'Set Effect\nName and Description', color = {1,1,1}, function_owner = self,
    position = {0,0.1,0.7}, rotation = {0,0,0}, width = 1000, height = 500, font_size = 100}
self.createButton(buttonParam)
