--[[
Line Drawer
Made by Sionar
--]]


------------------Constants
VERSION = '1.1.0'
COLOR_TABLE = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
X_OFF = 1.2
PLAYER1_POS = {{-1.4+X_OFF*0,0.1,0.7}, {-1.4+X_OFF*0,0.1,1.1}, {-2.0+X_OFF*0,0.1,1.1}, {-2.0+X_OFF*0,0.1,0.7}, {-2.0+X_OFF*0,0.1,0.3}, {-2.0+X_OFF*0,0.1,-0.1}, {-2.0+X_OFF*0,0.1,-0.5}, {-1.4+X_OFF*0,0.1,-0.5}, {-1.4+X_OFF*0,0.1,-0.1}, {-1.4+X_OFF*0,0.1,0.3}}
PLAYER2_POS = {{-1.4+X_OFF*1,0.1,0.7}, {-1.4+X_OFF*1,0.1,1.1}, {-2.0+X_OFF*1,0.1,1.1}, {-2.0+X_OFF*1,0.1,0.7}, {-2.0+X_OFF*1,0.1,0.3}, {-2.0+X_OFF*1,0.1,-0.1}, {-2.0+X_OFF*1,0.1,-0.5}, {-1.4+X_OFF*1,0.1,-0.5}, {-1.4+X_OFF*1,0.1,-0.1}, {-1.4+X_OFF*1,0.1,0.3}}
COLOR_POS = {{-1.4+X_OFF*2,0.1,0.7}, {-1.4+X_OFF*2,0.1,1.1}, {-2.0+X_OFF*2,0.1,1.1}, {-2.0+X_OFF*2,0.1,0.7}, {-2.0+X_OFF*2,0.1,0.3}, {-2.0+X_OFF*2,0.1,-0.1}, {-2.0+X_OFF*2,0.1,-0.5}, {-1.4+X_OFF*2,0.1,-0.5}, {-1.4+X_OFF*2,0.1,-0.1}, {-1.4+X_OFF*2,0.1,0.3}}
GIVE_TOOL_BUTTON_POS = {{1,0.1,0.9}, {0,0.1,0.9}, {-1,0.1,0.9}, {-1.7,0.1,0.3}, {-1.7,0.1,-0.3}, {-1,0.1,-0.9}, {0,0.1,-0.9}, {1,0.1,-0.9}, {1.7,0.1,-0.3}, {1.7,0.1,0.3}}
LINE_HEIGHT = 1
POINTS =
{
    White = {29.3, LINE_HEIGHT, -26},
    Brown = {0, LINE_HEIGHT, -26},
    Red = {-29.3, LINE_HEIGHT, -26},
    Orange = {-44, LINE_HEIGHT, -11.73},
    Yellow = {-44, LINE_HEIGHT, 11.73},
    Green = {-29.3, LINE_HEIGHT, 26},
    Teal = {0, LINE_HEIGHT, 26},
    Blue = {29.3, LINE_HEIGHT, 26},
    Purple = {44, LINE_HEIGHT, 11.73},
    Pink = {44, LINE_HEIGHT, -11.73},
}


------------------Variables
nameLabels = {}
valLabels = {}
lineTable = {}
player1 = ''
player2 = ''
lineColor = ''
promOnly = false


------------------Functions
function onLoad(saveString)
    refreshButtons()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function addLine(pColor1, pColor2, lColor)
    for k,v in pairs(lineTable) do
        if v.player1 == pColor1 and v.player2 == pColor2 or v.player1 == pColor2 and v.player2 == pColor1 then
            return
        end
    end

    if lColor == '' then
        return
    end

    local point1, point2
    point1 = POINTS[pColor1]
    point2 = POINTS[pColor2]
    if (pColor1 == 'White' and pColor2 == 'Red') or (pColor1 == 'Red' and pColor2 == 'White') then
        point1 = {point1[1],point1[2],point1[3]+0.5}
        point2 = {point2[1],point2[2],point2[3]+0.5}
    end
    if (pColor1 == 'Green' and pColor2 == 'Blue') or (pColor1 == 'Blue' and pColor2 == 'Green') then
        point1 = {point1[1],point1[2],point1[3]-0.5}
        point2 = {point2[1],point2[2],point2[3]-0.5}
    end
    lineData =
        {
            player1   = pColor1,
            player2   = pColor2,
            points    = {point1, point2},
            color     = lColor,
            thickness = 0.5,
            rotation  = {0,0,0}
        }
    table.insert(lineTable, lineData)
end

function removeLine(playerColor1, playerColor2)
    for k,v in pairs(lineTable) do
        if v.player1 == playerColor1 and v.player2 == playerColor2 or v.player1 == playerColor2 and v.player2 == playerColor1 then
            table.remove(lineTable, k)
        end
    end
end

function drawLineFunc(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        addLine(player1, player2, lineColor)
        Global.setVectorLines(lineTable)
        clearUI()
    end
end

function remLineFunc(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        removeLine(player1, player2)
        Global.setVectorLines(lineTable)
        clearUI()
    end
end

function clearLinesFunc(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        lineTable = {}
        Global.setVectorLines(lineTable)
        clearUI()
    end
end

function promStart(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        if promOnly == true then
            promOnly = false
            broadcastToAll("Line drawing tool access has been granted to all users", {1,1,1})
        else
            promOnly = true
            broadcastToAll("Line drawing tool access has been granted to promoted users only", {1,1,1})
        end
    end
    refreshButtons()
end

------------------UI
function refreshButtons()
    self.clearButtons()
    createLabels()
    createP1Buttons()
    createP2Buttons()
    createColorButtons()
    createActionButtons()
end

function clearUI()
    player1 = ''
    player2 = ''
    refreshButtons()
end

function createLabels()
    local buttonParam = {label = 'Player 1', click_function = 'nulFunc', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {-1.7,0.1,-1}, rotation = {0,0,0}, width = 1, height = 1, font_size = 120}
    self.createButton(buttonParam)

    local buttonParam = {label = 'Player 2', click_function = 'nulFunc', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {-0.5,0.1,-1}, rotation = {0,0,0}, width = 1, height = 1, font_size = 120}
    self.createButton(buttonParam)

    local buttonParam = {label = 'Color', click_function = 'nulFunc', color = {0,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
            position = {0.7,0.1,-1}, rotation = {0,0,0}, width = 1, height = 1, font_size = 120}
    self.createButton(buttonParam)
end

function createP1Buttons()
    buttonParam = {}
    for i = 1,10 do
        buttonParam.click_function = 'setPlayer1-' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = PLAYER1_POS[i]
        buttonParam.width = 300
        buttonParam.font_color = stringColorToRGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if player1 == COLOR_TABLE[i] then
            buttonParam.color = stringColorToRGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end

function setPlayer1(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        if player1 == COLOR_TABLE[index] then
            player1 = ''
        else
            player1 = COLOR_TABLE[index]
        end
        refreshButtons()
    end
end

for k = 1,10 do
    _G['setPlayer1-' .. k] = function(obj, col)
        setPlayer1(obj, col, k)
    end
end

function createP2Buttons()
    buttonParam = {}
    for i = 1,10 do
        buttonParam.click_function = 'setPlayer2-' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = PLAYER2_POS[i]
        buttonParam.width = 300
        buttonParam.font_color = stringColorToRGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if player2 == COLOR_TABLE[i] then
            buttonParam.color = stringColorToRGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end

function setPlayer2(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        if player2 == COLOR_TABLE[index] then
            player2 = ''
        else
            player2 = COLOR_TABLE[index]
        end
        refreshButtons()
    end
end

for k = 1,10 do
    _G['setPlayer2-' .. k] = function(obj, col)
        setPlayer2(obj, col, k)
    end
end

function createColorButtons()
    buttonParam = {}
    for i = 1,10 do
        buttonParam.click_function = 'setLineColor' .. i
        buttonParam.label = COLOR_TABLE[i]
        buttonParam.function_owner = self
        buttonParam.position = COLOR_POS[i]
        buttonParam.width = 300
        buttonParam.font_color = stringColorToRGB(COLOR_TABLE[i])
        buttonParam.font_size = 50

        if lineColor == COLOR_TABLE[i] then
            buttonParam.color = stringColorToRGB(COLOR_TABLE[i])
        else
            buttonParam.color = {0,0,0,1}
        end
        self.createButton(buttonParam)
    end
end

function setLineColor(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        if lineColor == COLOR_TABLE[index] then
            lineColor = ''
        else
            lineColor = COLOR_TABLE[index]
        end
        refreshButtons()
    end
end

for k = 1,10 do
    _G['setLineColor' .. k] = function(obj, col)
        setLineColor(obj, col, k)
    end
end

function createActionButtons()
    local buttonParam = {click_function = 'drawLineFunc', label = "Draw\nLine", color = {1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.9,0.1,-0.6}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'remLineFunc', label = "Remove\nLine", color = {1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.9,0.1,0}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'clearLinesFunc', label = "Clear\nAll Lines", color = {1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {1.9,0.1,0.6}, rotation = {0,0,0}, width = 500, height = 300, font_size = 80}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'givetMenu', function_owner = self, label = '☆', color = {0,0,0,0.8}, font_color = stringColorToRGB('Red'),
        position = {2.2,0.1,-1.2}, width = 100, height = 100, font_size = 80, tooltip = 'Give Line\nDrawer to:'}
    self.createButton(buttonParam)

    local buttonParam = {click_function = 'promStart', function_owner = self, label = '☆', color = {0,0,0,0.8}, font_color = stringColorToRGB('Blue'),
        position = {1.8,0.1,-1.2}, width = 100, height = 100, font_size = 80, tooltip = 'Toggle Promoted Only'}
    if promOnly == true then
        buttonParam.label = '★'
    end
    self.createButton(buttonParam)
end

function givetMenu()
    self.clearButtons()

    for i = 1,10 do
        local buttonParam = {click_function = 'giveTool' .. i, label = COLOR_TABLE[i], color = stringColorToRGB(COLOR_TABLE[i]), function_owner = self,
            position = GIVE_TOOL_BUTTON_POS[i], rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
        self.createButton(buttonParam)
    end

    local buttonParam = {click_function = 'returnFunc', label = "Cancel", color = {1,1,1,0.8}, function_owner = self,
        position = {0,0.1,0}, rotation = {0,0,0}, width = 500, height = 300, font_size = 100}
    self.createButton(buttonParam)
end

function giveTool(clickedButton, playerColor, index)
    if Player[playerColor].admin or not promOnly then
        self.setLock(true)
        local tempScale = self.getScale()[1]
        self.scale(1/tempScale)
        self.scale(6.1)
        local pos = {forward = -13, right = 0, up = 3}
        local rot = {x = 0, y = 180, z = 0}
        local options = Global.getTable('options')
        if options.zoneType ~= 6 then
            if COLOR_TABLE[index] == 'Purple' or COLOR_TABLE[index] == 'Orange' then
                pos['right'] = 5
            elseif COLOR_TABLE[index] == 'Pink' or COLOR_TABLE[index] == 'Yellow' then
                pos['right'] = -5
            end
        end
        giveObjectToPlayer(self, COLOR_TABLE[index], pos, rot)
        refreshButtons()
    end
end

for k = 1,10 do
    _G['giveTool' .. k] = function(obj, col)
        giveTool(obj, col, k)
    end
end

function returnFunc(clickedButton, playerColor)
    if Player[playerColor].admin or not promOnly then
        refreshButtons()
    end
end

function giveObjectToPlayer(object, playerColor, posAdd, rotAdd, ...)
	local pos
	local rot
	local vForward
	local vRight
	local vUp

	if playerColor == 'Maroon' or playerColor == 'Tan' then
        local greyPlayerHandGuids = Global.getTable('greyPlayerHandGuids')
		local ph = getObjectFromGUID(greyPlayerHandGuids[playerColor])
		if ph then
			pos = ph.getPosition()
			pos = {x = pos['x'], y = pos['y'], z = pos['z'] - 2.26}
			rot = ph.getRotation()
			vForward = ph.getTransformForward()
			vRight = ph.getTransformRight()
			vUp = ph.getTransformUp()
		end
	else
		local ph = Player[playerColor].getPlayerHand();
		if ph then
			pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			rot = {x = ph['rot_x'], y = ph['rot_y'], z = ph['rot_z']}
			vForward = {x = ph['trigger_forward_x'], y = ph['trigger_forward_y'], z = ph['trigger_forward_z']}
			vRight = {x = ph['trigger_right_x'], y = ph['trigger_right_y'], z = ph['trigger_right_z']}
			vUp = {x = ph['trigger_up_x'], y = ph['trigger_up_y'], z = ph['trigger_up_z']}
		end
	end

	if pos then
		if rotAdd['exactRot'] then
			object.setRotationSmooth({rotAdd['x'], rotAdd['y'], rotAdd['z']}, ...)
		else
			object.setRotationSmooth({rot['x'] + rotAdd['x'], rot['y'] + rotAdd['y'], rot['z'] + rotAdd['z']}, ...)
		end
		if posAdd['forceHeight'] then
			object.setPositionSmooth({pos['x'] + vForward['x'] * posAdd['forward'] + vRight['x'] * posAdd['right'] + vUp['x'] * posAdd['up'],
											  posAdd['forceHeight'],
											  pos['z'] + vForward['z'] * posAdd['forward'] + vRight['z'] * posAdd['right'] + vUp['z'] * posAdd['up']}, ...)
		else
			object.setPositionSmooth({pos['x'] + vForward['x'] * posAdd['forward'] + vRight['x'] * posAdd['right'] + vUp['x'] * posAdd['up'],
											  pos['y'] + vForward['y'] * posAdd['forward'] + vRight['y'] * posAdd['right'] + vUp['y'] * posAdd['up'],
											  pos['z'] + vForward['z'] * posAdd['forward'] + vRight['z'] * posAdd['right'] + vUp['z'] * posAdd['up']}, ...)
		end
	end
end
